pipeline {
  agent any
  environment {
    ECR_REPOSITORY = credentials('ECR_REPOSITORY')
    AWS_ACCOUNT_ID = credentials('AWS_ACCOUNT_ID')
    AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
  }
  
 stages {
         stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }
        stage('Continuous Integration') {
            steps {
                script {
                    echo 'Linting repository'
                    // Add linting commands here
                    echo 'Running unit tests'
                    // Add unit test commands here
                }
            }
        }
        stage('Login to ECR') {
            steps {
                script {
                    sh '''
                        aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ****.dkr.ecr.eu-north-1.amazonaws.com
                    '''
                }
            }
        }
        stage('Build Image') {
            steps {
                script {
                    sh 'docker build -t ****:latest .'
                }
            }
        }
        stage('Push Image') {
            steps {
                script {
                    sh 'docker push ****:latest'
                }
            }
        }
        stage('Continuous Deployment') {
            steps {
                sshagent(['jenkins']) {
                    script {
                        sh '''#!/bin/bash
                            ssh -o StrictHostKeyChecking=no -l ubuntu 13.49.184.78 <<'EOF'
                            docker-compose -f docker-compose.yml -f docker-compose.elk.yml pull
                            docker-compose -f docker-compose.yml -f docker-compose.elk.yml up -d
EOF
                        '''
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                echo 'Cleaning up Docker resources'
                sh 'docker system prune -f'
            }
        }
        failure {
            script {
                echo 'Build failed!'
                // Add any additional failure handling steps here
            }
        }
    }
}
